const mongoose = require('mongoose')

const orderSchema = new mongoose.Schema({
  ref: { type: String },
  store: { type: mongoose.Schema.ObjectId, ref: 'Store' },
  customer: { type: mongoose.Schema.ObjectId, ref: 'Customer' },
  shipment: { type: mongoose.Schema.ObjectId, ref: 'Shipment' },
  referral: { type: mongoose.Schema.ObjectId, ref: 'Referral' },
  createdAt: { type: Date, default: Date.now() },
  shippingAddress: { type: Map },
  billingAddress: { type: Map },
  taxData: { type: Map },
  billingMode: { type: String },
  note: { type: String },
  couponId: { type: mongoose.Schema.ObjectId, ref: 'Discount' },
  discountType: { type: String },
  deliveryCharge: { type: Number },
  paymentStatus: {
    type: String,
    default: 'Awaiting',
    enum: ['Awaiting', 'Recieved'],
  },
  status: {
    type: String,
    enum: [
      'Waiting For Acceptance',
      'Accepted',
      'AWB Assigned',
      'Label Generated',
      'Pickup Scheduled/Generated',
      'Pickup Queued',
      'Manifest Generated',
      'Shipped',
      'Delivered',
      'Cancelled',
      'RTO Initiated',
      'RTO Delivered',
      'Pending',
      'Lost',
      'Pickup Error',
      'RTO Acknowledged',
      'Pickup Rescheduled',
      'Cancellation Requested',
      'Out For Delivery',
      'In Transit',
      'Out For Pickup',
      'Pickup Exception',
      'Undelivered',
      'Delayed',
      'Destroyed',
      'Damaged',
      'Fulfilled',
      'Reached Destination Hub',
      'Misrouted',
      'RTO NDR',
      'RTO OFD',
      'Picked Up',
      'Self FulFiled',
      'Disposed Off',
      'Cancelled Before Dispatched',
      'RTO In Transit',
    ],
    default: 'Waiting For Acceptance',
  },
  status_id: {
    type: Number,
    enum: [
      -1,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
    ],
    default: -1,
  },
  etd: {
    type: Date,
  },
  courier_name: {
    type: String,
  },
  scans: [
    {
      date: {
        type: Date,
      },
      activity: {
        type: String,
      },
      location: {
        type: String,
      },
    },
  ],
  items: [
    {
      product: { type: mongoose.Schema.ObjectId, ref: 'Product' },
      quantity: { type: Number },
      variants: [
        {
          index: { type: String },
          quantity: { type: Number },
          selectedOption: { type: String },
        },
      ], // {type: String or index of variant available types, value: index of variant},
      color: { type: String },
      pricePerUnit: { type: Number },
      availableQuantity: { type: Number },
    },
  ],
  givenProducts: [{ type: Map }],
  freeProducts: [
    {
      productId: { type: mongoose.Schema.ObjectId, ref: 'Product' },
      quantity: { type: Number },
    },
  ],
  charges: { type: Map },
  appliedCoins: { type: Number, default: 0 },
  paymentMode: { type: String },
  coinsUsed: { type: Number, default: 0 },
  coinsEarned: { type: Number, default: 0 },
  amountToConfirm: { type: Number },
  paidAmount: { type: Number, default: 0 },
  reasonForCancellation: {
    type: String,
  },
})

orderSchema.pre(/^find/, function (next) {
  this.find({}).populate('customer').populate('referral')
  next()
})

orderSchema.index({
  ref: 'text',
  paymentMode: 'text',
  status: 'text',
  orderStatus: 'text',
  discountType: 'text',
  billingMode: 'text',
  note: 'text',
})

const Order = mongoose.model('Order', orderSchema)
module.exports = Order
